name: Deploy Project

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET: sandwich-user-projects
  USER_ID: ${{ secrets.USER_ID }}
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  ECS_CONTAINER_NAME: "app-container"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # 🔧 잠금파일 유무에 따라 설치 분기 + build 스크립트가 있을 때만 빌드
      - name: Build (if needed)
        run: |
          if [ -f package.json ]; then
            if [ -f package-lock.json ]; then
              npm ci
            else
              npm install
            fi
            if npm run | grep -qE '(^|[[:space:]])build([[:space:]]|:)'; then
              npm run build || true
            fi
          fi

      - name: Pick deploy dir (build/dist/out or .)
        id: pick
        run: |
          for d in build dist out; do
            if [ -d "$d" ]; then
              echo "dir=$d" >> $GITHUB_OUTPUT
              echo "Detected deploy dir: $d"
              exit 0
            fi
          done
          echo "dir=." >> $GITHUB_OUTPUT
          echo "No build/dist/out found, deploying repository root (static files)."

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.SANDWICH_USER_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SANDWICH_USER_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download additional files from S3
        run: |
          mkdir -p additional
          aws s3 sync "s3://${{ env.S3_BUCKET }}/${{ env.USER_ID }}/${{ env.PROJECT_ID }}/deploy/" additional/ || true

      - name: Create ECS Cluster
        run: |
          aws ecs create-cluster --cluster-name sandwich-${{ github.repository_owner }}-${{ github.event.repository.name }} || true

      - name: Create ECS Service
        run: |
          aws ecs create-service \
            --cluster sandwich-${{ github.repository_owner }}-${{ github.event.repository.name }} \
            --service-name sandwich-${{ github.repository_owner }}-${{ github.event.repository.name }} \
            --task-definition sandwich-${{ github.repository_owner }}-${{ github.event.repository.name }} \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-0c63ddf51361003c7],securityGroups=[sg-05757f4e3849d99cf],assignPublicIp=ENABLED}" || true

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create ECR repository if not exists
        run: |
          aws ecr describe-repositories --repository-names "sandwich-user-projects/${{ env.USER_ID }}-${{ env.PROJECT_ID }}" || \
          aws ecr create-repository --repository-name "sandwich-user-projects/${{ env.USER_ID }}-${{ env.PROJECT_ID }}"

      - name: Build and Push Docker image (only if Dockerfile exists)
        run: |
          if [ -f Dockerfile ]; then
            IMAGE_TAG=${GITHUB_SHA}
            ECR_URI=398808282696.dkr.ecr.ap-northeast-2.amazonaws.com/sandwich-user-projects/${{ env.USER_ID }}-${{ env.PROJECT_ID }}
            docker build -t $ECR_URI:$IMAGE_TAG .
            docker push $ECR_URI:$IMAGE_TAG
            docker tag $ECR_URI:$IMAGE_TAG $ECR_URI:latest
            docker push $ECR_URI:latest
            echo "[{\"name\": \"${{ env.ECS_CONTAINER_NAME }}\", \"imageUri\": \"$ECR_URI:$IMAGE_TAG\"}]" > imagedefinitions.json
          else
            echo "No Dockerfile, skipping Docker build"
          fi

      - name: Deploy to S3
        run: |
          SRC="${{ steps.pick.outputs.dir }}"
          if [ "$SRC" = "." ]; then
            aws s3 sync . "s3://${{ env.S3_BUCKET }}/${{ env.USER_ID }}/${{ env.PROJECT_ID }}/" \
              --exclude ".git/*" --exclude ".github/*" --exclude "node_modules/*"
          else
            aws s3 sync "$SRC/" "s3://${{ env.S3_BUCKET }}/${{ env.USER_ID }}/${{ env.PROJECT_ID }}/" --delete
          fi

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.SANDWICH_USER_CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/${{ env.USER_ID }}/${{ env.PROJECT_ID }}/*"
